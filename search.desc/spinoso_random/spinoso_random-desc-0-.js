searchState.loadedDescShard("spinoso_random", 0, "An implementation of Ruby’s pseudo-random number …\nError that indicates <code>rand()</code> was passed an invalid …\nError that indicates a random number could not be …\nSum type of all errors possibly returned from <code>Random</code> …\nA maximum float bound.\nA random float.\nError that indicates that <code>Random::new</code> failed to generate a …\nError that indicates a <code>Random</code> random number generator …\nA maximum integer bound.\nA random integer.\nA range constraint for generating random numbers.\nError that indicates that <code>new_seed</code> failed to generate a …\nError that indicates the system source of …\nThe default bound when no bound is supplied.\nA generated random number.\nRandom provides an interface to Ruby’s pseudo-random …\nError that indicates that <code>urandom()</code> failed to generate the …\nError that indicates the system source of …\nConstruct a new domain error.\nFill a buffer with bytes generated from the RNG.\nFill a buffer with bytes generated from the RNG.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReseed from four <code>u32</code>s.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether this argument error is a domain error.\nRetrieve the exception message associated with this …\nRetrieve the exception message associated with this …\nRetrieve the exception message associated with this new …\nRetrieve the exception message associated with this new …\nCreate a new Mersenne Twister random number generator with …\nConstruct a new, default initialize error.\nConstruct a new, default urandom error.\nConstruct a new, default new seed error.\nConstruct a new, default argument error.\nRead a new <code>Random</code> seed, using platform-provided randomness.\nGenerate next <code>u32</code> output.\nGenerate next <code>f64</code> output.\nGenerate next <code>u32</code> output.\nGenerate next <code>u64</code> output.\nGenerate random numbers bounded from below by 0 and above …\nReturns the seed value used to initialize the generator.\nConvert a byte array into a reseeding key of <code>u32</code>s.\nFill a buffer with bytes generated from the RNG.\nRead random bytes, using platform-provided randomness.\nCreate a new random number generator using the given seed.\nCreate a new random number generator using the given seed.\nConstruct a new argument error from an invalid <code>Max</code> …\nCreate a new random number generator using the given seed.")