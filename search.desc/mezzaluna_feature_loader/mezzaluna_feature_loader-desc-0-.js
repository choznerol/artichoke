searchState.loadedDescShard("mezzaluna_feature_loader", 0, "Ruby feature loader.\nA Ruby source (“feature”) that has been loaded into an …\nA handle to a file that can be tested for equality with …\nA set of all sources loaded by a Ruby interpreter with …\nReturn a reference to the underlying file.\nReturn a mutable reference to the underlying file.\nReturn the underlying device number of this handle.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a handle from a file.\nConstruct a handle from a path.\nReturn the underlying inode number of this handle.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA set to track loaded Ruby source paths based on a <code>Vec</code> and …\nStrategies for loading Ruby source code and native …\nGet the path associated with this feature.\nConstruct a handle from stderr.\nConstruct a handle from stdin.\nConstruct a handle from stdout.\nCreate a new feature from a file handle and path.\nCreate a new feature from a virtual in-memory path.\nAn iterator over the features in a <code>LoadedFeatures</code>.\nAn iterator over the feature paths in a <code>LoadedFeatures</code>.\nA set of all sources loaded by a Ruby interpreter with …\nReturns the number of elements the set of features can …\nReturns true if the set contains a feature.\nAn iterator visiting all features in arbitrary order. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the feature set’s <code>BuildHasher</code>.\nAdd a feature to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the set contains no features.\nAn iterator visiting all features in insertion order. The …\nReturns the number of features in the set.\nCreates an empty <code>LoadedFeatures</code>.\nReserves capacity for at least <code>additional</code> more elements to …\nShrinks the capacity of the set with a lower bound.\nShrinks the capacity of the set as much as possible. It …\nTries to reserve capacity for at least <code>additional</code> more …\nCreates an empty <code>LoadedFeatures</code> with the specified …\nCreates a new empty feature set with the specified …\nCreates a new empty feature set which will use the given …\nA Ruby source code loader that loads sources directly from …\nA Ruby source code loader that loads sources directly from …\nA Ruby source code loader that searches in paths given by …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a reference to the loader’s current <code>$LOAD_PATH</code>.\nReturn a reference to the loader’s current <code>$LOAD_PATH</code>.\nCreate a new native file system loader that searches the …\nCreate a new in-memory file system loader that loads …\nCreate a new native file system loader that searches the …\nInsert byte content into the in-memory feature store at …\nInsert string content into the in-memory feature store at …\nCheck whether <code>path</code> points to a file in the backing file …\nCheck whether <code>path</code> points to a file in the backing file …\nCheck whether <code>path</code> points to a file in the backing file …\nReplace the loader’s current <code>$LOAD_PATH</code>.\nCreate a new in-memory file system loader that loads …\nCreate a new native file system loader that searches the …\nCreate a new native file system loader that searches the …\nCreate a new native file system loader that searches the …\nCreate a new native file system loader that searches the …")