searchState.loadedDescShard("spinoso_array", 0, "Contiguous growable vector types that implement the Ruby …\nA contiguous growable array type based on <code>Vec&lt;T&gt;</code>.\nVectors that implement the small vector optimization can …\nA wrapper around the decomposed parts of a <code>Vec&lt;T&gt;</code>.\nA contiguous growable array type based on …\nA contiguous growable array type based on …\nReturns an unsafe mutable pointer to the vector’s buffer.\nReturns an unsafe mutable pointer to the vector’s buffer.\nReturns an unsafe mutable pointer to the vector’s buffer.\nExtracts a mutable slice containing the entire vector.\nExtracts a mutable slice containing the entire vector.\nExtracts a mutable slice containing the entire vector.\nReturns a raw pointer to the vector’s buffer.\nReturns a raw pointer to the vector’s buffer.\nReturns a raw pointer to the vector’s buffer.\nExtracts a slice containing the entire vector.\nExtracts a slice containing the entire vector.\nExtracts a slice containing the entire vector.\nConstruct a new two-element <code>SmallArray</code> from the given …\nConstruct a new two-element <code>TinyArray</code> from the given …\nConstruct a new two-element <code>Array</code> from the given arguments.\nReturns the number of elements the vector can hold without …\nReturns the number of elements the vector can hold without …\nReturns the number of elements the vector can hold without …\nThe number of elements the source vector can hold without …\nClears the vector, removing all values.\nClears the vector, removing all values.\nClears the vector, removing all values.\nAppends the elements of <code>other</code> to self.\nAppends the elements of <code>other</code> to self.\nAppends the elements of <code>other</code> to self.\nDeletes the element at the specified <code>index</code>, returning that …\nDeletes the element at the specified <code>index</code>, returning that …\nDeletes the element at the specified <code>index</code>, returning that …\nReturns a slice of the underlying vector that excludes the …\nReturns a slice of the underlying vector that excludes the …\nReturns a slice of the underlying vector that excludes the …\nReturns the first element from the vector, or <code>None</code> if the …\nReturns the first element from the vector, or <code>None</code> if the …\nReturns the first element from the vector, or <code>None</code> if the …\nReturns up to <code>n</code> of the first elements from the vector, or …\nReturns up to <code>n</code> of the first elements from the vector, or …\nReturns up to <code>n</code> of the first elements from the vector, or …\nDecompose a <code>Vec&lt;T&gt;</code> into its raw components.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an <code>Array&lt;T&gt;</code> directly from the raw components of …\nConstruct the raw components of a <code>Vec&lt;T&gt;</code> by decomposing it.\nReturns a reference to an element at the index.\nReturns a reference to an element at the index.\nReturns a reference to an element at the index.\nInsert the elements from a slice at a position <code>index</code> in …\nInsert the elements from a slice at a position <code>index</code> in …\nInsert the elements from a slice at a position <code>index</code> in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConverts the vector into <code>Box&lt;[T]&gt;</code>.\nConsume the array and return the inner …\nConsume the array and return the inner …\nConsume the array and return the inner <code>Vec&lt;T&gt;</code>.\nDecomposes an <code>Array&lt;T&gt;</code> into its raw components.\nCreates a <code>Vec&lt;T&gt;</code> directly from the raw components of …\nConsume the array and return its elements as a <code>Vec&lt;T&gt;</code>.\nConsume the array and return its elements as a <code>Vec&lt;T&gt;</code>.\nConsume the array and return its elements as a <code>Vec&lt;T&gt;</code>.\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nReturns <code>true</code> if the vector contains no elements.\nReturns an iterator over the slice.\nReturns an iterator over the slice.\nReturns an iterator over the slice.\nReturns an iterator that allows modifying each value.\nReturns an iterator that allows modifying each value.\nReturns an iterator that allows modifying each value.\nReturns the last element from the vector, or <code>None</code> if the …\nReturns the last element from the vector, or <code>None</code> if the …\nReturns the last element from the vector, or <code>None</code> if the …\nReturns up to <code>n</code> of the last elements from the vector, or …\nReturns up to <code>n</code> of the last elements from the vector, or …\nReturns up to <code>n</code> of the last elements from the vector, or …\nReturns the number of elements in the vector, also …\nReturns the number of elements in the vector, also …\nReturns the number of elements in the vector, also …\nThe number of elements in the source vector, also referred …\nConstruct a new, empty <code>SmallArray&lt;T&gt;</code>.\nConstruct a new, empty <code>TinyArray&lt;T&gt;</code>.\nConstruct a new, empty <code>Array&lt;T&gt;</code>.\nRemoves the last element from the vector and returns it, …\nRemoves the last element from the vector and returns it, …\nRemoves the last element from the vector and returns it, …\nRemoves the last <code>n</code> elements from the vector.\nRemoves the last <code>n</code> elements from the vector.\nRemoves the last <code>n</code> elements from the vector.\nA non-null pointer to a buffer of <code>T</code>.\nAppends an element to the back of the vector.\nAppends an element to the back of the vector.\nAppends an element to the back of the vector.\nCreates a new array by repeating this array <code>n</code> times.\nCreates a new array by repeating this array <code>n</code> times.\nCreates a new array by repeating this array <code>n</code> times.\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReserves capacity for at least <code>additional</code> more elements to …\nReverses the order of elements of the vector, in place.\nReverses the order of elements of the vector, in place.\nReverses the order of elements of the vector, in place.\nSet element at position <code>index</code> within the vector, extending …\nSet element at position <code>index</code> within the vector, extending …\nSet element at position <code>index</code> within the vector, extending …\nSet the vector’s length without dropping or moving out …\nSet the vector’s length without dropping or moving out …\nInsert the elements from a slice at a position <code>index</code> in …\nInsert the elements from a slice at a position <code>index</code> in …\nInsert the elements from a slice at a position <code>index</code> in …\nInsert element at position <code>start</code> within the vector and …\nInsert element at position <code>start</code> within the vector and …\nInsert element at position <code>start</code> within the vector and …\nRemoves the first element of the vector and returns it …\nRemoves the first element of the vector and returns it …\nRemoves the first element of the vector and returns it …\nRemoves the first <code>n</code> elements from the vector.\nRemoves the first <code>n</code> elements from the vector.\nRemoves the first <code>n</code> elements from the vector.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of the vector as much as possible.\nShrinks the capacity of the vector as much as possible.\nReturn a reference to a subslice of the vector.\nReturn a reference to a subslice of the vector.\nReturn a reference to a subslice of the vector.\nReturns a slice of the underlying vector that includes …\nReturns a slice of the underlying vector that includes …\nReturns a slice of the underlying vector that includes …\nInserts an element to the front of the vector.\nInserts an element to the front of the vector.\nInserts an element to the front of the vector.\nPrepends the elements of <code>other</code> to self.\nPrepends the elements of <code>other</code> to self.\nPrepends the elements of <code>other</code> to self.\nConstruct a new, empty <code>SmallArray&lt;T&gt;</code> with the specified …\nConstruct a new, empty <code>TinyArray&lt;T&gt;</code> with the specified …\nConstruct a new, empty <code>Array&lt;T&gt;</code> with the specified …\nConstruct a new <code>SmallArray&lt;T&gt;</code> with length <code>len</code> and all …\nConstruct a new <code>TinyArray&lt;T&gt;</code> with length <code>len</code> and all …\nConstruct a new <code>Array&lt;T&gt;</code> with length <code>len</code> and all elements …")