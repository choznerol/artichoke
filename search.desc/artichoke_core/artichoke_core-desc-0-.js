searchState.loadedDescShard("artichoke_core", 0, "This crate provides a set of traits that, when …\nDefine and store class specs on an interpreter.\nCoerce Ruby values to native numerics.\nDefine constants on an interpreter.\nConvert between Rust and Ruby objects.\nRoutines for debugging and printing exception messages.\nRun code on an Artichoke interpreter.\nFile-backed Rust extensions for the Artichoke VM.\nGet and set global variables on an interpreter.\nBuild hashers and hash values.\nIntern <code>Symbol</code>s on an interpreter.\nI/O read and write APIs.\nLoad Ruby and Rust sources into the VM.\nDefine and store module specs on an interpreter.\nParse code on an Artichoke interpreter.\nA “prelude” for users of the <code>artichoke-core</code> crate.\nInterpreter global pseudorandom number generator.\nTrack <code>Regexp</code> global state.\nInformation about an Artichoke build.\nExpose the global context, called <em>top self</em>, to the …\nRuby and Rust type mappings.\nTypes that implement <code>Value</code> can be represented in the …\nEmit warnings during interpreter execution.\nDefine and store class specs on an interpreter.\nConcrete error type for errors encountered when …\nType representing a class specification.\nConcrete value type for boxed Ruby values.\nRetrieve a boxed Ruby value containing a <code>Class</code> object for …\nRetrieve a class definition from the state bound to Rust …\nCreate a class definition bound to a Rust type <code>T</code>.\nRetrieve whether a class definition exists from the state …\nCreate a new instance of the class bound to the Rust type <code>T</code>…\nCoerce Ruby values to native numerics (floats and …\nConcrete error type for errors encountered when coercing …\nConcrete float type to coerce values into, e.g. <code>f64</code>.\nConcrete type of boxed Ruby value as inputs to coerce …\nCoerce the given Ruby value to a <code>Float</code>.\nDefine constants on an interpreter.\nConcrete error type for fallible operations.\nConcrete type for Ruby values.\nDefine a class constant.\nDefine a global constant.\nDefine a module constant.\nInfallible conversion between two types.\nMutable infallible conversion between two types.\nError type for failed conversions.\nError type for failed conversions.\nFallible conversions between two types.\nMutable fallible conversions between two types.\nPerforms the infallible conversion.\nPerforms the infallible conversion.\nPerforms the fallible conversion.\nPerforms the fallible conversion.\nDebugging and <code>Exception</code> message support.\nConcrete type for return values from eval.\nReturn the class name for the given value’s type.\nReturn a name for the given value’s type that is …\nConcrete error type for eval functions.\nExecute code and retrieve its result.\nConcrete type for return values from eval.\nEval code on the Artichoke interpreter using the current …\nEval code on the Artichoke interpreter using a new file …\nEval code on the Artichoke interpreter using the current …\nConcrete type for interpreter.\nConcrete error type for eval functions.\nRust extension hook that can be required.\nCalled when the filename mapped to this type is required …\nConcrete error type for failures manipulating global …\nGet and set global variables on an interpreter.\nConcrete value type for global variables.\nGet the Ruby value stored in the global variable pointed …\nSet global variable pointed to by <code>name</code> to the given Ruby …\nUnset global variable pointed to by <code>name</code>.\nConcrete error type for errors encountered when retrieving …\nConcrete <code>BuildHasher</code> type which is global to the …\nA trait for retrieving an interpreter-global <code>BuildHasher</code>.\nRetrieve the interpreter’s global <code>BuildHasher</code>.\nConcrete type for errors returned while interning symbols.\nStore and retrieve byte strings that have the same …\nThe initial <code>Symbol</code> index returned by the interner.\nConcrete type for symbol identifiers.\nCheck if a byte string is already interned and return its …\nCheck if a string is already interned and return its …\nStore an immutable byte string for the life of the …\nStore an immutable string for the life of the interpreter.\nRetrieve the original byte content of an interned byte …\nRetrieve the number of unique strings interned.\nConcrete error type for errors encountered when reading …\nPerform I/O external to the interpreter.\nWrites the given bytes to the interpreter stdout stream.\nWrites the given bytes to the interpreter stdout stream …\n<code>Kernel#require</code> did not require the file because it has …\nConcrete type for interpreter.\nConcrete type for errors returned from file system IO.\nConcrete type for errors returned by <code>File::require</code>.\nLoad Ruby sources and Rust extensions into an interpreter.\nThe side effect from a call to <code>Kernel#load</code>.\nThe side effect from a call to <code>Kernel#require</code>.\n<code>Kernel#require</code> succeeded at requiring the file.\n<code>Kernel#load</code> succeeded at loading the file.\nAdd a Rust extension hook to the virtual file system. A …\nAdd a Ruby source to the virtual file system.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad source located at the given path.\nRetrieve file contents for a source file.\nRequire source located at the given path.\nTest for a source file at a path and return the absolute …\nTest for a source file at a path.\nConcrete error type for errors encountered when …\nDefine and store module specs on an interpreter.\nType representing a module specification.\nConcrete value type for boxed Ruby values.\nCreate a module definition bound to a Rust type <code>T</code>.\nRetrieve whether a module definition exists from the …\nRetrieve a boxed Ruby value containing a <code>Module</code> object for …\nRetrieve a module definition from the interpreter bound to …\nConcrete type for parser context.\nError type for Parser APIs.\nErrors encountered when incrementing line numbers on …\nAn overflow occurred when incrementing the line number.\nManage parser state, active filename context, and line …\nIncrement line number and return the new value.\nFetch the current line number from the parser state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturn a reference to the currently active context.\nRemove the current active context and return it.\nSet the currently active context by modifying the parser …\nReset parser state to initial values.\nConcrete type for errors when retrieving the pseudorandom …\nInterpreter global pseudorandom number generator (PRNG).\nConcrete type for the interpreter pseudorandom number …\nReturn a shared reference to the interpreter pseudorandom …\nReturn a mutable reference to the interpreter pseudorandom …\nConcrete error type for errors encountered when …\nTrack the state of <code>Regexp</code> special global variables and …\nRetrieve the current number of set <code>Regexp</code> global variables.\nClear all <code>Regexp</code> state.\nSet the current number of set <code>Regexp</code> global variables.\nInformation about an Artichoke build.\nA description of the compiler used to build Artichoke.\nCopyright information.\nA description of the current build.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nThe patch level the current build.\nThe target triple of the platform this build targets.\nThe build date of this release.\nThe revision count of the Artichoke git repository used …\nThe target MRI Ruby version for this build.\nReturn a <code>Value</code>-wrapped reference to <em>top self</em>.\nConcrete <code>Value</code> type.\nReturn a <code>Value</code>-wrapped reference to “top self”.\nRuby <code>Array</code> type.\nRust <code>bool</code> type.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nRust <code>Vec&lt;u8&gt;</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nFFI type for an owned C pointer.\nRuby <code>Exception</code> type.\nRuby <code>Fiber</code> type.\nRuby <code>Fixnum</code> type.\nRust float type.\nRuby <code>Float</code> type.\nRuby <code>Hash</code> type.\nInternal type for non-heap allocated structs.\nRust <code>HashMap&lt;K, V&gt;</code> type.\nRuby <code>Module</code> type.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nArbitrary Rust struct type.\nRuby <code>Object</code> type.\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nA special <code>Value</code> that is a placeholder for collections that …\nClasses of Ruby types.\nClasses of Rust types.\nRust signed integer type.\nInternal type for the singleton class of an object.\nRust <code>String</code> type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nUnreachable interpreter value. Receiving one of these from …\nRust unsigned integer type.\nRust <code>Vec&lt;T&gt;</code> type.\nRuby <code>Class</code> name for VM type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConcrete type for arguments passed to <code>funcall</code>.\nConcrete type for Artichoke interpreter.\nConcrete type for blocks passed to <code>funcall</code>.\nConcrete error type for funcall errors.\nA boxed Ruby value owned by the interpreter.\nConcrete type for results from <code>funcall</code>.\nCall <code>#freeze</code> on this <code>Value</code>.\nCall a method on this <code>Value</code> with arguments and an optional …\nCall <code>#inspect</code> on this <code>Value</code>.\nCall <code>#frozen?</code> on this <code>Value</code>.\nWhether <code>self</code> is <code>nil</code>\nWhether <code>self</code> responds to a method.\nReturn this values Rust-mapped type tag.\nCall <code>#to_s</code> on this <code>Value</code>.\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nConcrete error type for errors encountered when outputting …\nEmit warnings during interpreter execution to stderr.\nEmit a warning message using <code>Warning#warn</code>.")