searchState.loadedDescShard("artichoke", 0, "Artichoke Ruby\nInterpreter instance.\nThe <code>Error</code> type, a wrapper around a dynamic exception type.\nFormat Ruby <code>Exception</code> backtraces.\nConsume an interpreter and free all live objects.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new Artichoke Ruby interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume an interpreter and return the pointer to the …\nUnderlying mruby interpreter.\nClass name of the <code>Exception</code>.\nCreate a new interpreter from an underlying <code>mrb</code> and a <code>State</code>…\nDetect if Ruby code parses successfully.\nA “prelude” for users of the <code>artichoke</code> crate.\nWrites the given bytes to the interpreter stdout stream.\nPrevent the given value from being garbage collected.\nWrites the given bytes to the interpreter stdout stream …\nA REPL (read–eval–print–loop) for an Artichoke …\nArtichoke CLI entry point.\nInterpreter state.\nBlanket implementation that always succeeds by delegating …\nBlanket implementation that always succeeds by delegating …\nUnset global variable pointed to by <code>name</code>.\nExecute a a closure by moving the <code>State</code> into the <code>mrb</code> …\nFormat an <code>Exception</code> backtrace into an <code>io::Write</code> suitable …\nFormat an <code>Exception</code> backtrace into an <code>io::Write</code> suitable …\nCode must be fewer than <code>isize::MAX</code> bytes.\nInternal parser error. This is a fatal error.\nWraps a <code>artichoke_backend</code> mruby parser.\nState shows whether artichoke can parse some code or why …\nThe code has too many end statements.\nThe code has unclosed blocks.\nThe current expression is an unterminated <code>Regexp</code>.\nThe current expression is an unterminated block.\nThe current expression is an unterminated heredoc.\nThe current expression is an unterminated <code>String</code>.\nCode is valid and fit to eval.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn a reference to the wrapped interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether this variant indicates a code block is open.\nWhether this variant is a fatal parse error.\nWhether this variant is a recoverable error.\nConstruct a new, default <code>State</code>.\nCreate a new parser from an interpreter instance.\nParse the code buffer to determine if the code is a …\nConcrete type for arguments passed to <code>funcall</code>.\nRuby <code>ArgumentError</code> error type.\nRuby <code>Array</code> type.\nInterpreter instance.\nConcrete type for interpreter.\nConcrete type for interpreter.\nConcrete type for Artichoke interpreter.\nConcrete type for blocks passed to <code>funcall</code>.\nRust <code>bool</code> type.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nRust <code>Vec&lt;u8&gt;</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nDefine and store class specs on an interpreter.\nCoerce Ruby values to native numerics (floats and …\nConcrete type for parser context.\nInfallible conversion between two types.\nMutable infallible conversion between two types.\nFFI type for an owned C pointer.\nDebugging and <code>Exception</code> message support.\nDefine constants on an interpreter.\nRuby <code>EOFError</code> error type.\nRuby <code>EncodingError</code> error type.\nThe <code>Error</code> type, a wrapper around a dynamic exception type.\nConcrete error type for errors encountered when …\nConcrete error type for errors encountered when coercing …\nConcrete error type for fallible operations.\nError type for failed conversions.\nError type for failed conversions.\nConcrete error type for eval functions.\nConcrete error type for eval functions.\nConcrete error type for failures manipulating global …\nConcrete error type for errors encountered when retrieving …\nConcrete type for errors returned while interning symbols.\nConcrete error type for errors encountered when reading …\nConcrete type for errors returned from file system IO.\nConcrete error type for errors encountered when …\nError type for Parser APIs.\nConcrete type for errors when retrieving the pseudorandom …\nConcrete error type for errors encountered when …\nConcrete error type for funcall errors.\nConcrete error type for errors encountered when outputting …\nExecute code and retrieve its result.\nRuby <code>Exception</code> error type.\nRuby <code>Exception</code> type.\nConcrete type for errors returned by <code>File::require</code>.\nRuby <code>fatal</code> error type.\nRuby <code>Fiber</code> type.\nRuby <code>FiberError</code> error type.\nRust extension hook that can be required.\nRuby <code>Fixnum</code> type.\nRust float type.\nRuby <code>Float</code> type.\nConcrete float type to coerce values into, e.g. <code>f64</code>.\nRuby <code>FloatDomainError</code> error type.\nRuby <code>FrozenError</code> error type.\nConcrete <code>BuildHasher</code> type which is global to the …\nGet and set global variables on an interpreter.\nInterpreter guard that prepares an <code>Artichoke</code> to re-enter …\nA trait for retrieving an interpreter-global <code>BuildHasher</code>.\nRuby <code>Hash</code> type.\nRuby <code>IOError</code> error type.\nErrors encountered when incrementing line numbers on …\nRuby <code>IndexError</code> error type.\nInternal type for non-heap allocated structs.\nStore and retrieve byte strings that have the same …\nRuby <code>Interrupt</code> error type.\nPerform I/O external to the interpreter.\nRuby <code>KeyError</code> error type.\nRuby <code>LoadError</code> error type.\nLoad Ruby sources and Rust extensions into an interpreter.\nRuby <code>LocalJumpError</code> error type.\nRust <code>HashMap&lt;K, V&gt;</code> type.\nRuby <code>Module</code> type.\nDefine and store module specs on an interpreter.\nGarbage collection primitives for an mruby interpreter.\nRuby <code>NameError</code> error type.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nRuby <code>NoMemoryError</code> error type.\nRuby <code>NoMethodError</code> error type.\nRuby <code>NotImplementedError</code> error type.\nArbitrary Rust struct type.\nRuby <code>Object</code> type.\nAn overflow occurred when incrementing the line number.\nManage parser state, active filename context, and line …\nInterpreter global pseudorandom number generator (PRNG).\nConcrete type for the interpreter pseudorandom number …\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nRuby <code>RangeError</code> error type.\nA special <code>Value</code> that is a placeholder for collections that …\nTrack the state of <code>Regexp</code> special global variables and …\nRuby <code>RegexpError</code> error type.\nInformation about an Artichoke build.\nClasses of Ruby types.\nPolymorphic exception type that corresponds to Ruby’s …\nRuby <code>RuntimeError</code> error type.\nClasses of Rust types.\nThe initial <code>Symbol</code> index returned by the interner.\nRuby <code>ScriptError</code> error type.\nRuby <code>SecurityError</code> error type.\nRuby <code>SignalException</code> error type.\nRust signed integer type.\nInternal type for the singleton class of an object.\nType representing a class specification.\nType representing a module specification.\nRuby <code>StandardError</code> error type.\nRuby <code>StopIteration</code> error type.\nRust <code>String</code> type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nConcrete type for symbol identifiers.\nRuby <code>SyntaxError</code> error type.\nRuby <code>SystemCallError</code> error type.\nRuby <code>SystemExit</code> error type.\nRuby <code>SystemStackError</code> error type.\nRuby <code>ThreadError</code> error type.\nReturn a <code>Value</code>-wrapped reference to <em>top self</em>.\nFallible conversions between two types.\nMutable fallible conversions between two types.\nRuby <code>TypeError</code> error type.\nRuby <code>UncaughtThrowError</code> error type.\nUnreachable interpreter value. Receiving one of these from …\nRust unsigned integer type.\nA boxed Ruby value owned by the interpreter.\nConcrete value type for boxed Ruby values.\nConcrete type of boxed Ruby value as inputs to coerce …\nConcrete type for Ruby values.\nConcrete type for return values from eval.\nConcrete type for return values from eval.\nConcrete value type for global variables.\nConcrete value type for boxed Ruby values.\nConcrete <code>Value</code> type.\nConcrete type for results from <code>funcall</code>.\nRust <code>Vec&lt;T&gt;</code> type.\nEmit warnings during interpreter execution to stderr.\nRuby <code>ZeroDivisionError</code> error type.\nRetrieve the current number of set <code>Regexp</code> global variables.\nIncrement line number and return the new value.\nA description of the compiler used to build Artichoke.\nReturn a raise-able <code>sys::mrb_value</code>.\nCheck if a byte string is already interned and return its …\nCheck if a string is already interned and return its …\nRuby <code>Class</code> name for VM type.\nReturn the class name for the given value’s type.\nRetrieve a boxed Ruby value containing a <code>Class</code> object for …\nRetrieve a class definition from the state bound to Rust …\nClear all <code>Regexp</code> state.\nCoerce the given Ruby value to a <code>Float</code>.\nA description of the compiler used to build Artichoke.\nPerforms the infallible conversion.\nPerforms the infallible conversion.\nCopyright information.\nCreate a savepoint in the GC arena.\nCreate a class definition bound to a Rust type <code>T</code>.\nAdd a Rust extension hook to the virtual file system. A …\nCreate a module definition bound to a Rust type <code>T</code>.\nAdd a Ruby source to the virtual file system.\nDefine a class constant.\nDefine a global constant.\nDefine a module constant.\nA description of the current build.\nDisable garbage collection.\nEnable garbage collection.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nError types for Ruby exceptions and unwinding support.\nEval code on the Artichoke interpreter using the current …\nEval code on the Artichoke interpreter using a new file …\nEval code on the Artichoke interpreter using the current …\nFetch the current line number from the parser state.\nCall <code>#freeze</code> on this <code>Value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPerform a full garbage collection.\nCall a method on this <code>Value</code> with arguments and an optional …\nGet the Ruby value stored in the global variable pointed …\nRetrieve the interpreter’s global <code>BuildHasher</code>.\nPerform an incremental garbage collection.\nCall <code>#inspect</code> on this <code>Value</code>.\nReturn a name for the given value’s type that is …\nStore an immutable byte string for the life of the …\nStore an immutable string for the life of the interpreter.\nAccess the inner guarded interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve whether a class definition exists from the state …\nCall <code>#frozen?</code> on this <code>Value</code>.\nRetrieve whether a module definition exists from the …\nWhether <code>self</code> is <code>nil</code>\nRetrieve the number of live objects on the interpreter …\nLoad source located at the given path.\nRetrieve the original byte content of an interned byte …\nMark a <code>Value</code> as reachable in the mruby garbage collector.\nMessage of the <code>Exception</code>.\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nRetrieve a boxed Ruby value containing a <code>Module</code> object for …\nRetrieve a module definition from the interpreter bound to …\nUnderlying mruby interpreter.\nClass name of the <code>Exception</code>.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nConstruct a new, default <code>ArgumentError</code> Ruby exception.\nConstruct a new, default <code>EncodingError</code> Ruby exception.\nConstruct a new, default <code>EOFError</code> Ruby exception.\nConstruct a new, default <code>Exception</code> Ruby exception.\nConstruct a new, default <code>fatal</code> Ruby exception.\nConstruct a new, default <code>FiberError</code> Ruby exception.\nConstruct a new, default <code>FloatDomainError</code> Ruby exception.\nConstruct a new, default <code>FrozenError</code> Ruby exception.\nConstruct a new, default <code>IndexError</code> Ruby exception.\nConstruct a new, default <code>Interrupt</code> Ruby exception.\nConstruct a new, default <code>IOError</code> Ruby exception.\nConstruct a new, default <code>KeyError</code> Ruby exception.\nConstruct a new, default <code>LoadError</code> Ruby exception.\nConstruct a new, default <code>LocalJumpError</code> Ruby exception.\nConstruct a new, default <code>NameError</code> Ruby exception.\nConstruct a new, default <code>NoMemoryError</code> Ruby exception.\nConstruct a new, default <code>NoMethodError</code> Ruby exception.\nConstruct a new, default <code>NotImplementedError</code> Ruby …\nConstruct a new, default <code>RangeError</code> Ruby exception.\nConstruct a new, default <code>RegexpError</code> Ruby exception.\nConstruct a new, default <code>RuntimeError</code> Ruby exception.\nConstruct a new, default <code>ScriptError</code> Ruby exception.\nConstruct a new, default <code>SecurityError</code> Ruby exception.\nConstruct a new, default <code>SignalException</code> Ruby exception.\nConstruct a new, default <code>StandardError</code> Ruby exception.\nConstruct a new, default <code>StopIteration</code> Ruby exception.\nConstruct a new, default <code>SyntaxError</code> Ruby exception.\nConstruct a new, default <code>SystemCallError</code> Ruby exception.\nConstruct a new, default <code>SystemExit</code> Ruby exception.\nConstruct a new, default <code>SystemStackError</code> Ruby exception.\nConstruct a new, default <code>ThreadError</code> Ruby exception.\nConstruct a new, default <code>TypeError</code> Ruby exception.\nConstruct a new, default <code>UncaughtThrowError</code> Ruby exception.\nConstruct a new, default <code>ZeroDivisionError</code> Ruby exception.\nCreate a new guard that wraps an interpreter.\nCreate a new instance of the class bound to the Rust type <code>T</code>…\nThe patch level the current build.\nReturn a reference to the currently active context.\nThe target triple of the platform this build targets.\nRemove the current active context and return it.\nWrites the given bytes to the interpreter stdout stream.\nReturn a shared reference to the interpreter pseudorandom …\nReturn a mutable reference to the interpreter pseudorandom …\nSet the currently active context by modifying the parser …\nWrites the given bytes to the interpreter stdout stream …\nRetrieve file contents for a source file.\nThe build date of this release.\nCalled when the filename mapped to this type is required …\nRequire source located at the given path.\nReset parser state to initial values.\nTest for a source file at a path and return the absolute …\nWhether <code>self</code> responds to a method.\nThe target MRI Ruby version for this build.\nCopyright information.\nA description of the current build.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nThe patch level the current build.\nThe target triple of the platform this build targets.\nThe build date of this release.\nThe target MRI Ruby version for this build.\nReturn this values Rust-mapped type tag.\nThe target MRI Ruby version for this build.\nThe target MRI Ruby version for this build.\nSet the current number of set <code>Regexp</code> global variables.\nSet global variable pointed to by <code>name</code> to the given Ruby …\nTest for a source file at a path.\nInterpreter state.\nRetrieve the number of unique strings interned.\nCall <code>#to_s</code> on this <code>Value</code>.\nReturn a <code>Value</code>-wrapped reference to “top self”.\nPerforms the fallible conversion.\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nPerforms the fallible conversion.\nUnset global variable pointed to by <code>name</code>.\nOptional backtrace specified by a <code>Vec</code> of frames.\nEmit a warning message using <code>Warning#warn</code>.\nSet a description of the compiler used to build Artichoke.\nConstruct a new, <code>ArgumentError</code> Ruby exception with the …\nConstruct a new, <code>EncodingError</code> Ruby exception with the …\nConstruct a new, <code>EOFError</code> Ruby exception with the given …\nConstruct a new, <code>Exception</code> Ruby exception with the given …\nConstruct a new, <code>fatal</code> Ruby exception with the given …\nConstruct a new, <code>FiberError</code> Ruby exception with the given …\nConstruct a new, <code>FloatDomainError</code> Ruby exception with the …\nConstruct a new, <code>FrozenError</code> Ruby exception with the given …\nConstruct a new, <code>IndexError</code> Ruby exception with the given …\nConstruct a new, <code>Interrupt</code> Ruby exception with the given …\nConstruct a new, <code>IOError</code> Ruby exception with the given …\nConstruct a new, <code>KeyError</code> Ruby exception with the given …\nConstruct a new, <code>LoadError</code> Ruby exception with the given …\nConstruct a new, <code>LocalJumpError</code> Ruby exception with the …\nConstruct a new, <code>NameError</code> Ruby exception with the given …\nConstruct a new, <code>NoMemoryError</code> Ruby exception with the …\nConstruct a new, <code>NoMethodError</code> Ruby exception with the …\nConstruct a new, <code>NotImplementedError</code> Ruby exception with …\nConstruct a new, <code>RangeError</code> Ruby exception with the given …\nConstruct a new, <code>RegexpError</code> Ruby exception with the given …\nConstruct a new, <code>RuntimeError</code> Ruby exception with the given\nConstruct a new, <code>ScriptError</code> Ruby exception with the given …\nConstruct a new, <code>SecurityError</code> Ruby exception with the …\nConstruct a new, <code>SignalException</code> Ruby exception with the …\nConstruct a new, <code>StandardError</code> Ruby exception with the …\nConstruct a new, <code>StopIteration</code> Ruby exception with the …\nConstruct a new, <code>SyntaxError</code> Ruby exception with the given …\nConstruct a new, <code>SystemCallError</code> Ruby exception with the …\nConstruct a new, <code>SystemExit</code> Ruby exception with the given …\nConstruct a new, <code>SystemStackError</code> Ruby exception with the …\nConstruct a new, <code>ThreadError</code> Ruby exception with the given …\nConstruct a new, <code>TypeError</code> Ruby exception with the given …\nConstruct a new, <code>UncaughtThrowError</code> Ruby exception with …\nConstruct a new, <code>ZeroDivisionError</code> Ruby exception with the …\nSet copyright information.\nSet a description of the current build.\nSet the engine, or VM, used in the current build.\nSet the version of the engine, or VM, used in the current …\nSet the patch level the current build.\nSet the target triple of the platform this build targets.\nSet the build date of this release.\nSet the target MRI Ruby version for this build.\nSet the target MRI Ruby version for this build.\nThe <code>Error</code> type, a wrapper around a dynamic exception type.\nPolymorphic exception type that corresponds to Ruby’s …\nReturn a raise-able <code>sys::mrb_value</code>.\nMessage of the <code>Exception</code>.\nClass name of the <code>Exception</code>.\nRaise implementation for <code>RubyException</code> boxed trait objects.\nOptional backtrace specified by a <code>Vec</code> of frames.\nFailed to initialize parser during REPL boot.\nInternal fatal parser error.\nParser processed too many lines of input.\nConfiguration for the REPL readline prompt.\nAltered prompt when an expression is not terminated.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new, default <code>ParserAllocError</code>.\nConstructs a new, default <code>ParserLineCountError</code>.\nConstructs a new, default <code>ParserInternalError</code>.\nCreate a new, default REPL prompt.\nPrefix for the result of <code>$expression.inspect</code>. A newline is …\nRun a REPL for the mruby interpreter exposed by the <code>mruby</code> …\nBasic prompt for start of a new expression.\nCommand line arguments for Artichoke <code>ruby</code> frontend.\nCall to the Ruby interpreter raised an exception.\nResult-like enum for calls to eval code on a Ruby …\nCall to the Ruby interpreter succeeded without error.\nConstruct a new, empty <code>Args</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain entry point for Artichoke’s version of the <code>ruby</code> CLI.\nAdd a parsed ARGV to this <code>Args</code>.\nAdd a parsed set of <code>-e</code> inline eval commands to this <code>Args</code>.\nAdd a parsed copyright flag to this <code>Args</code>.\nAdd a parsed fixture path to this <code>Args</code>.\nAdd a parsed program file path to this <code>Args</code>.")