searchState.loadedDescShard("tz", 0, "This crate provides the <code>TimeZone</code> and <code>DateTime</code> types, which …\nDate time associated to a local time type, exprimed in the …\nDate time error\nContains the error value\nLocal time type search error\nI/O error\nLocal time type associated to a time zone\nLocal time type error\nContains the success value\nOut of range error\nDate time projection error\nAlias for <code>std::result::Result</code> with the crate unified error\nSystem time error\nTime zone\nTime zone error\nReference to a time zone\nTransition rule error\nConversion from slice to array error\nUnified error type for everything in the crate\nUnified error for parsing a TZif file\nUnified error for parsing a TZ string\nUTC date time exprimed in the proleptic gregorian calendar\nUTF-8 error\nTypes related to a date time.\nError types.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTypes related to a time zone.\nDate time associated to a local time type, exprimed in the …\nType of a found date time created by the <code>DateTime::find</code> …\nList containing the found date times created by the …\nWrapper reference type with methods for extracting the …\nFound date time is valid\nFound date time is invalid because it was skipped by a …\nUTC date time exprimed in the proleptic gregorian calendar\nReturns the count of found date times\nReturns the subslice of written data\nReturns the earliest found date time if existing\nReturns the earliest found date time if existing\nFind the possible date times corresponding to a date, a …\nFind the possible date times corresponding to a date, a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a UTC date time from a Unix time in seconds and …\nConstruct a date time from a Unix time in seconds with …\nConstruct a date time from a Unix time in seconds with …\nConstruct a UTC date time from total nanoseconds since …\nConstruct a date time from total nanoseconds since Unix …\nConstruct a date time from total nanoseconds since Unix …\nReturns hours since midnight in <code>[0, 23]</code>\nReturns hours since midnight in <code>[0, 23]</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts and returns the inner list of found date times\nReturns <code>true</code> if all found date times have been written in …\nReturns the latest found date time if existing\nReturns the latest found date time if existing\nReturns local time type\nReturns minutes in <code>[0, 59]</code>\nReturns minutes in <code>[0, 59]</code>\nReturns month in <code>[1, 12]</code>\nReturns month in <code>[1, 12]</code>\nReturns day of the month in <code>[1, 31]</code>\nReturns day of the month in <code>[1, 31]</code>\nReturns nanoseconds in <code>[0, 999_999_999]</code>\nReturns nanoseconds in <code>[0, 999_999_999]</code>\nConstruct a new <code>FoundDateTimeListRefMut</code> value\nConstruct a UTC date time\nConstruct a date time\nReturns the current UTC date time\nReturns the current date time associated to the specified …\nProject the UTC date time into a time zone.\nProject the date time into another time zone.\nReturns seconds in <code>[0, 60]</code>, with a possible leap second\nReturns seconds in <code>[0, 60]</code>, with a possible leap second\nReturns total nanoseconds since Unix epoch (…\nReturns total nanoseconds since Unix epoch (…\nReturns the found date time if existing and unique\nReturns the found date time if existing and unique\nReturns the Unix time in seconds associated to the UTC …\nReturns UTC Unix time in seconds\nReturns days since Sunday in <code>[0, 6]</code>\nReturns days since Sunday in <code>[0, 6]</code>\nReturns year\nReturns year\nReturns days since January 1 in <code>[0, 365]</code>\nReturns days since January 1 in <code>[0, 365]</code>\nDate time just after the forward transition\nDate time just before the forward transition\nDate time error\nDate time error\nLocal time type search error\nLocal time type search error\nInvalid TZif file\nInvalid TZ string\nI/O error\nI/O error\nI/O error\nLocal time type error\nLocal time type error\nOut of range error\nOut of range error\nInteger parsing error\nDate time projection error\nDate time projection error\nSystem time error\nTime zone error\nTime zone error\nTransition rule error\nTransition rule error\nConversion from slice to array error\nConversion from slice to array error\nUnified error type for everything in the crate\nUnified error type for parsing a TZif file\nUnified error for parsing a TZif file\nUnified error type for parsing a TZ string\nUnified error for parsing a TZ string\nUnified error for parsing a TZ string\nUnsupported TZif file\nUnsupported TZ string\nUTF-8 error\nUTF-8 error\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAlternate local time types\nTransition rule representing alternate local time types\nFixed local time type\nZero-based Julian day in <code>[0, 365]</code>, taking occasional …\nZero-based Julian day in <code>[0, 365]</code>, taking occasional …\nJulian day in <code>[1, 365]</code>, without taking occasional February …\nJulian day in <code>[1, 365]</code>, without taking occasional February …\nLeap second of a TZif file\nLocal time type associated to a time zone\nDay represented by a month, a month week and a week day\nDay represented by a month, a month week and a week day\nTransition rule day\nTime zone\nReference to a time zone\nTransition of a TZif file\nTransition rule\nReturns a reference to the time zone\nReturns leap second correction\nReturns local time type for Daylight Saving Time\nReturns end day of Daylight Saving Time\nReturns local end day time of Daylight Saving Time, in …\nReturns start day of Daylight Saving Time\nReturns local start day time of Daylight Saving Time, in …\nReturns extra transition rule applicable after the last …\nFind the current local time type associated to the time …\nFind the local time type associated to the time zone at …\nFind the local time type associated to the time zone at …\nConstruct a time zone with the specified UTC offset in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a time zone from a POSIX TZ string, as described …\nConstruct a time zone from the contents of a time zone file\nReturns inner value\nReturns inner value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns daylight saving time indicator\nReturns list of leap seconds\nReturns local time zone.\nReturns local time type index\nReturns list of local time types\nReturns month in <code>[1, 12]</code>\nConstruct a transition rule day represented by a Julian …\nConstruct a transition rule day represented by a …\nConstruct a transition rule day represented by a month, a …\nConstruct a transition rule representing alternate local …\nConstruct a TZif file transition\nConstruct a TZif file leap second\nConstruct a local time type\nConstruct a time zone\nConstruct a time zone reference\nReturns local time type for standard time\nReturns time zone designation\nReturns list of transitions\nReturns Unix leap time\nReturns Unix leap time\nReturns offset from UTC in seconds\nConstruct the local time type associated to UTC\nConstruct the time zone associated to UTC\nConstruct the time zone reference associated to UTC\nReturns week of the month in <code>[1, 5]</code>, with <code>5</code> representing …\nReturns day of the week in <code>[0, 6]</code> from Sunday\nConstruct a local time type with the specified UTC offset …")