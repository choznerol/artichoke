searchState.loadedDescShard("spinoso_time", 0, "Time is an abstraction of dates and times.\nNumber of microseconds in one nanosecond.\nNumber of nanoseconds in one second.\nA Time struct backed by the <code>tz-rs</code> crate.\nCreated when one of the parameters of a <code>DateTime</code> falls …\nContains the error value\nA rescuable Integer overflow error. Caused when trying to …\nThe maximum allowed offset in seconds from UTC in the …\nThe maximum allowed offset in seconds from UTC in the past …\nRepresents the number of seconds offset from UTC.\nContains the success value\nCreated when trying to create a <code>DateTime</code>, however the …\nAlias for <code>std::result::Result</code> with the unified <code>TimeError</code>.\nImplementation of Ruby <code>Time</code>, a timezone-aware datetime, …\nA wrapper around some of the errors provided by <code>tz-rs</code>.\nSerialized representation of a timestamp using a …\nThe provided tz offset seconds offset is outside of the …\nIndicates that there was an issue when parsing a string …\nAn rescuable unknown error (instead of panicking).\nA rescuable error originally from the <code>tz-rs</code> library.\nAddition — Adds some duration to <em>time</em> and returns that …\nAddition — Adds some <code>f64</code> fraction seconds to <em>time</em> and …\nAddition — Adds some <code>i64</code> to <em>time</em> and returns that value …\nAddition — Adds some <code>u64</code> to <em>time</em> and returns that value …\nSubtraction — Subtracts the given duration from <em>time</em> and …\nSubtraction — Subtracts the given <code>f64</code> as fraction …\nSubtraction — Subtracts the given <code>i64</code> from <em>time</em> and …\nSubtraction — Subtracts the given <code>u64</code> from <em>time</em> and …\nReturns the day of the month (1..n) for <em>time</em>.\nThe day of the month <code>1..=n</code> for the source <em>time</em>.\nReturns an integer representing the day of the week, <code>0..=6</code>…\nReturns an integer representing the day of the year, …\nGenerate an offset with a number of seconds from UTC.\nReturns a canonical string representation of <em>time</em>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the hour of the day (0..23) for <em>time</em>.\nThe hour of the day <code>0..=23</code> for the source <em>time</em>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <em>time</em> occurs during Daylight Saving Time in …\nReturns <code>true</code> if <em>time</em> represents Friday.\nReturns <code>true</code> if <em>time</em> represents Monday.\nReturns <code>true</code> if <em>time</em> represents Saturday.\nReturns <code>true</code> if <em>time</em> represents Sunday.\nReturns <code>true</code> if <em>time</em> represents Thursday.\nReturns <code>true</code> if <em>time</em> represents Tuesday.\nReturns whether this offset is UTC.\nReturns true if the time zone is UTC.\nReturns <code>true</code> if <em>time</em> represents Wednesday.\nWhether the source <em>time</em> occurs during Daylight Saving Time …\nGenerate an offset based on the detected local time zone …\nReturns a Time based on the provided values in the local …\nReturns the number of microseconds for <em>time</em>.\nThe minute of the hour <code>0..=59</code> for the source <em>time</em>.\nReturns the minute of the hour (0..59) for <em>time</em>.\nReturns the month of the year (1..12) for <em>time</em>.\nThe month of the year <code>1..=12</code> for the source <em>time</em>.\nReturns the number of nanoseconds for <em>time</em>.\nReturns a new Time from the given values in the provided …\nReturns a Time with the current time in the System …\nRounds sub seconds to a given precision in decimal digits …\nThe second of the minute <code>0..=59</code> for the source <em>time</em>.\nReturns the second of the minute (0..60) for <em>time</em>.\nConverts <em>time</em> to local time (using the local time zone in …\nConverts <em>time</em> to the provided time zone, modifying the …\nConverts <em>time</em> to the GMT time zone with the provided …\nConverts <em>time</em> to UTC (GMT), modifying the receiver.\nFormats <em>time</em> according to the directives in the given …\nReturns the numerator and denominator for the number of …\nReturns the name of the time zone as a string.\nSerialize a <code>Time</code> into its components as a <code>ToA</code>.\nReturns the number of seconds since the Epoch with …\nReturns the number of seconds as a signed integer since …\nReturns a new Time object representing <em>time</em> in local time …\nReturns a new Time object representing <em>time</em> based on the …\nReturns a new <em>time</em> in UTC.\nConstruct a Offset based on the accepted MRI values.\nConstruct a Offset with the offset in seconds from UTC.\nCreate a new Time object base on a <code>ToA</code>\nGenerate a UTC based offset.\nReturns a Time based on the provided values in UTC.\nReturns the offset in seconds between the timezone of <em>time</em> …\nAn integer representing the day of the week, <code>0..=6</code>, with …\nReturns a Time in the given timezone with the number of …\nAn integer representing the day of the year, <code>1..=366</code> for …\nReturns the year for <em>time</em> (including the century).\nThe year (including the century) for the source <em>time</em>.\nThe timezone used for the source <em>time</em>.")