searchState.loadedDescShard("spinoso_regexp", 0, "Error that indicates an argument parsing or value logic …\nError that indicates an argument parsing or value logic …\nA <code>Config</code> represents the parsed, expanded, and normalized …\nAn iterator that yields a debug representation of a <code>Regexp</code> …\nEngine feature is disabled.\nEngine feature is disabled.\nThe encoding of a Regexp literal.\nSum type of all errors possibly returned from <code>Regexp</code> APIs.\nThe highest group matched by the last successful match.\nThe information about the last match in the current scope.\nThe string matched by the last successful match.\nConfiguration options for Ruby Regexps.\nError that indicates a <code>Regexp</code> was malformed at runtime.\nError that indicates a <code>Regexp</code> was malformed at runtime.\nThe state of a Regexp engine flag in <code>Options</code>.\nThe string to the left of the last successful match.\nThe string to the right of the last successful match.\nA <code>Source</code> represents the literal contents used to construct …\nError that indicates a given <code>Regexp</code> pattern could not be …\nError that indicates a given <code>Regexp</code> pattern could not be …\nReturns the set containing all flags.\nSerialize the option flags to a string suitable for a …\nSerialize the option flags to a string suitable for …\nSerialize the encoding flags to a string suitable for a …\nReturns the intersection between the two sets of flags.\nDisables all flags disabled in the set.\nReturns the union of the two sets of flags.\nAdds the set of flags.\nReturns the raw value of the flags currently stored.\nReturns the left flags, but with all the right flags …\nToggles the set of flags.\nThe number of captures for a match of <code>haystack</code> against …\nErrors\nReturns the number of captures.\nReturns the complement of this set of flags.\nReturns <code>true</code> if all of the flags in <code>other</code> are contained …\nCreate a disabled <code>RegexpOption</code>.\nReturns the difference between the flags in <code>self</code> and <code>other</code>.\nReturns an empty set of flags.\nReturn the 0th capture group if <code>haystack</code> is matched by …\nWhether these <code>Options</code> are configured for extended mode with\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Options</code> to its bit flag representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from <code>bool</code> to its <code>RegexpOption</code> representation.\nReturns the argument unchanged.\nTruncate the given <code>i64</code> to one byte and generate flags.\nReturns the argument unchanged.\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Encoding</code> to its bit flag representation.\nConvert an <code>Options</code> to its bit flag representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from underlying bit representation, unless that …\nConvert from underlying bit representation, dropping any …\nConvert from underlying bit representation, preserving all …\nWhether these <code>Options</code> are configured for case-insensitive …\nInserts the specified flags in-place.\nReturns the intersection between the flags in <code>self</code> and …\nReturns <code>true</code> if there are flags common to both <code>self</code> and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert an <code>Encoding</code> to its bit representation.\nConvert an <code>Options</code> to its bit representation.\nReturns <code>true</code> if all flags are currently set.\nWhether this source was parsed with ignore case enabled.\nReturns <code>true</code> if no flags are currently stored.\nReturn whether this option is enabled.\nWhether the Regexp was parsed as a literal, e.g. …\nWhether the Regexp was parsed as a literal, e.g. …\nCheck whether this regexp matches the given haystack …\nRetrieve the exception message associated with this …\nRetrieve the exception message associated with this regexp …\nRetrieve the exception message associated with this syntax …\nWhether these <code>Options</code> are configured for multiline mode.\nReturns a hash representing information about the named …\nErrors\nConstruct a new <code>Debug</code> iterator with a regexp source, …\nConstructs a new, default <code>InvalidEncodingError</code>.\nConstruct a new <code>None</code> encoding.\nConstruct a new, default argument error.\nConstruct a new, default regexp error.\nConstruct a new, default syntax error.\nConstruct a new, disabled <code>RegexpOption</code>.\nConstructs a new, default <code>Options</code>.\nConstruct a new, empty <code>Source</code>.\nConstruct a new, empty <code>Config</code>.\nReturns the complement of this set of flags.\nGlobal variable name for the nth capture group from a …\nGlobal variable name for the nth capture group from a …\nReturn a copy of the underlying <code>Options</code>.\nReturn a copy of the underlying <code>Options</code>.\nExtracts a slice containing the entire pattern.\nExtracts a slice containing the entire pattern.\nErrors\nRemoves the specified flags in-place.\nInserts or removes the specified flags depending on the …\nInserts or removes the specified flags depending on the …\nReturns the set difference of the two sets of flags.\nDisables all flags enabled in the set.\nReturns the symmetric difference between the flags in <code>self</code> …\nToggles the specified flags in-place.\nTry to parse an <code>Options</code> from a full-width <code>i64</code>.\nReturns the union of between the flags in <code>self</code> and <code>other</code>.\nAn options instance that has only case insensitive mode …\nConstruct a Regexp with a UTF-8 <code>regex</code> backend.\nConstruct a new argument error with a message.\nConstruct a new regexp error with a message.\nConstruct a new syntax error with a message.\nConstruct a new <code>Source</code> with the given pattern and <code>Options</code>.\nConstruct a new <code>Config</code> with the given pattern and <code>Options</code>.")