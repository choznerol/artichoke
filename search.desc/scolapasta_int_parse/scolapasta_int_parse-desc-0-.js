searchState.loadedDescShard("scolapasta_int_parse", 0, "Parse a given byte string and optional radix into an <code>i64</code>.\nAn <code>ArgumentError</code>.\nError that indicates the byte string input to <code>parse</code> was …\nIf the given radix falls within the range of an <code>i32</code>, but …\nSum type for all possible errors from this crate.\nError that indicates the radix input to <code>parse</code> was invalid.\nAn enum describing which type of Ruby <code>Exception</code> an …\nA checked container for the radix to use when converting a …\nAn <code>InvalidRadixError</code>.\nIf the given radix falls outside the range of an <code>i32</code>, the …\nExtract the <code>Radix</code> as the underlying <code>u32</code>.\nThe default radix is <code>10</code>.\nMap an invalid radix error to the kind of Ruby <code>Exception</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new <code>Radix</code>.\nConstruct a new <code>Radix</code> without checking the value.\nParse a given byte string and optional <code>Radix</code> into an <code>i64</code>.\nReturn the subject of parsing that returned this argument …")