searchState.loadedDescShard("artichoke_backend", 0, "artichoke-backend\nInterpreter instance.\nInterpreter guard that prepares an <code>Artichoke</code> to re-enter …\nConsume an interpreter and free all live objects.\nA “prelude” for users of the <code>artichoke-core</code> crate.\nError types for Ruby exceptions and unwinding support.\nFunctions for interacting directly with mruby structs from …\nUtilities for interfacing <code>std::fmt</code> with Artichoke’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the inner guarded interpreter.\nCreate and initialize an <code>Artichoke</code> interpreter.\nCreate and initialize an <code>Artichoke</code> interpreter with build …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume an interpreter and return the pointer to the …\nVirtual file system.\nUnderlying mruby interpreter.\nExtract <code>sys::mrb_value</code>s from a <code>sys::mrb_state</code> to adapt a C …\nCreate a new interpreter from an underlying <code>mrb</code> and a <code>State</code>…\nCreate a new guard that wraps an interpreter.\nA “prelude” for users of the <code>artichoke-backend</code> crate.\nWrites the given bytes to the interpreter stdout stream.\nPrevent the given value from being garbage collected.\nWrites the given bytes to the interpreter stdout stream …\nInformation about an Artichoke build.\nInterpreter state.\nRust bindings for mruby, customized for Artichoke.\nBlanket implementation that always succeeds by delegating …\nBlanket implementation that always succeeds by delegating …\nUnset global variable pointed to by <code>name</code>.\nExtract an <code>Artichoke</code> instance from the userdata on a …\nBoxed values on the Ruby interpreter heap.\nExecute a a closure by moving the <code>State</code> into the <code>mrb</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a new, empty no block given error.\nConstruct a <code>Block</code> from a Ruby value.\nConstruct a <code>Block</code> from a Ruby value.\nReturn the <code>Ruby</code> type of the object given instead of a …\nA registry for Class specs that uses types as keys.\nReturns the number of class specs the registry can hold …\nAn iterator of all class specs stored in the <code>Registry</code> in …\nReturns true if the registry contains a class spec for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the class spec corresponding to the …\nReturns a reference to the registry’s <code>BuildHasher</code>.\nInserts a type-class spec pair into the registry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the registry contains class specs.\nReturns the number of class specs in the registry.\nConstruct a new, empty <code>Registry</code>.\nReserves <code>capacity</code> for at least additional more elements to …\nResolve a type’s <code>sys::RClass</code> using its enclosing scope …\nShrinks the capacity of the registry with a lower bound. …\nShrinks the capacity of the map as much as possible. It …\nTries to reserve capacity for at least additional more …\nConstruct a new <code>Registry</code> with the given <code>capacity</code>.\nConstruct a new <code>Registry</code> with the given <code>capacity</code> and …\nConstruct a new <code>Registry</code> with the given <code>hash_builder</code>.\nFailed to convert from Rust type to a boxed Ruby value.\nStrategy to use for handling errors in <code>convert_type</code>.\nTurn conversion errors into <code>TypeError</code>s.\nTurn conversion errors into a successful <code>nil</code> value.\nFailed to convert from boxed Ruby value to a Rust type.\nGet a unique reference to the inner <code>T</code>.\nGet a shared reference to the inner <code>T</code>.\nFallible coercion of the given value to a Ruby <code>Array</code> or <code>nil</code>…\nFallible conversion of the given value to a Ruby <code>Array</code> or …\nFallible conversion of the given value to a Ruby <code>Integer</code> …\nFallible conversion of the given value to a Ruby <code>String</code> or …\nAttempt a fallible conversion of a Ruby value to a given …\nConvert a <code>f64</code> to an <code>i64</code> by rounding toward zero.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to implicitly convert a <code>Value</code> to an integer.\nAttempt to implicitly convert a <code>Value</code> to an optional byte …\nAttempt to implicitly convert a <code>Value</code> to a …\nAttempt to implicitly convert a <code>Value</code> to a byte slice …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempt a fallible conversion of the given value to <code>i64</code>.\nConstruct a new guard around the given <code>T</code>.\nTake the inner <code>T</code> out of the guard.\nFallible coercion of the given value to a Ruby <code>Array</code> via …\nFallible conversion of the given value to a Ruby <code>Array</code> via …\nFallible coercion of the given value to a Ruby <code>Integer</code> via …\nFallible conversion of the given value to a Ruby <code>Integer</code> …\nFallible conversion of the given value to a Ruby <code>String</code> …\nSafety\nConcrete type for arguments passed to <code>funcall</code>.\nRuby <code>Array</code> type.\nConcrete type for interpreter.\nConcrete type for interpreter.\nConcrete type for Artichoke interpreter.\nConcrete type for blocks passed to <code>funcall</code>.\nRust <code>bool</code> type.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nRust <code>Vec&lt;u8&gt;</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nDefine and store class specs on an interpreter.\nCoerce Ruby values to native numerics (floats and …\nConcrete type for parser context.\nInfallible conversion between two types.\nMutable infallible conversion between two types.\nFFI type for an owned C pointer.\nDebugging and <code>Exception</code> message support.\nDefine constants on an interpreter.\nConcrete error type for errors encountered when …\nConcrete error type for errors encountered when coercing …\nConcrete error type for fallible operations.\nError type for failed conversions.\nError type for failed conversions.\nConcrete error type for eval functions.\nConcrete error type for eval functions.\nConcrete error type for failures manipulating global …\nConcrete error type for errors encountered when retrieving …\nConcrete type for errors returned while interning symbols.\nConcrete error type for errors encountered when reading …\nConcrete type for errors returned from file system IO.\nConcrete error type for errors encountered when …\nError type for Parser APIs.\nConcrete type for errors when retrieving the pseudorandom …\nConcrete error type for errors encountered when …\nConcrete error type for funcall errors.\nConcrete error type for errors encountered when outputting …\nExecute code and retrieve its result.\nRuby <code>Exception</code> type.\nConcrete type for errors returned by <code>File::require</code>.\nRuby <code>Fiber</code> type.\nRust extension hook that can be required.\nRuby <code>Fixnum</code> type.\nRust float type.\nRuby <code>Float</code> type.\nConcrete float type to coerce values into, e.g. <code>f64</code>.\nConcrete <code>BuildHasher</code> type which is global to the …\nGet and set global variables on an interpreter.\nA trait for retrieving an interpreter-global <code>BuildHasher</code>.\nRuby <code>Hash</code> type.\nErrors encountered when incrementing line numbers on …\nInternal type for non-heap allocated structs.\nStore and retrieve byte strings that have the same …\nPerform I/O external to the interpreter.\nLoad Ruby sources and Rust extensions into an interpreter.\nRust <code>HashMap&lt;K, V&gt;</code> type.\nRuby <code>Module</code> type.\nDefine and store module specs on an interpreter.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nArbitrary Rust struct type.\nRuby <code>Object</code> type.\nAn overflow occurred when incrementing the line number.\nManage parser state, active filename context, and line …\nInterpreter global pseudorandom number generator (PRNG).\nConcrete type for the interpreter pseudorandom number …\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nA special <code>Value</code> that is a placeholder for collections that …\nTrack the state of <code>Regexp</code> special global variables and …\nInformation about an Artichoke build.\nClasses of Ruby types.\nClasses of Rust types.\nThe initial <code>Symbol</code> index returned by the interner.\nRust signed integer type.\nInternal type for the singleton class of an object.\nType representing a class specification.\nType representing a module specification.\nRust <code>String</code> type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nConcrete type for symbol identifiers.\nReturn a <code>Value</code>-wrapped reference to <em>top self</em>.\nFallible conversions between two types.\nMutable fallible conversions between two types.\nUnreachable interpreter value. Receiving one of these from …\nRust unsigned integer type.\nA boxed Ruby value owned by the interpreter.\nConcrete value type for boxed Ruby values.\nConcrete type of boxed Ruby value as inputs to coerce …\nConcrete type for Ruby values.\nConcrete type for return values from eval.\nConcrete type for return values from eval.\nConcrete value type for global variables.\nConcrete value type for boxed Ruby values.\nConcrete <code>Value</code> type.\nConcrete type for results from <code>funcall</code>.\nRust <code>Vec&lt;T&gt;</code> type.\nEmit warnings during interpreter execution to stderr.\nRetrieve the current number of set <code>Regexp</code> global variables.\nIncrement line number and return the new value.\nA description of the compiler used to build Artichoke.\nCheck if a byte string is already interned and return its …\nCheck if a string is already interned and return its …\nRuby <code>Class</code> name for VM type.\nReturn the class name for the given value’s type.\nRetrieve a boxed Ruby value containing a <code>Class</code> object for …\nRetrieve a class definition from the state bound to Rust …\nClear all <code>Regexp</code> state.\nCoerce the given Ruby value to a <code>Float</code>.\nPerforms the infallible conversion.\nPerforms the infallible conversion.\nCreate a class definition bound to a Rust type <code>T</code>.\nAdd a Rust extension hook to the virtual file system. A …\nCreate a module definition bound to a Rust type <code>T</code>.\nAdd a Ruby source to the virtual file system.\nDefine a class constant.\nDefine a global constant.\nDefine a module constant.\nEval code on the Artichoke interpreter using the current …\nEval code on the Artichoke interpreter using a new file …\nEval code on the Artichoke interpreter using the current …\nFetch the current line number from the parser state.\nCall <code>#freeze</code> on this <code>Value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall a method on this <code>Value</code> with arguments and an optional …\nGet the Ruby value stored in the global variable pointed …\nRetrieve the interpreter’s global <code>BuildHasher</code>.\nCall <code>#inspect</code> on this <code>Value</code>.\nReturn a name for the given value’s type that is …\nStore an immutable byte string for the life of the …\nStore an immutable string for the life of the interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve whether a class definition exists from the state …\nCall <code>#frozen?</code> on this <code>Value</code>.\nRetrieve whether a module definition exists from the …\nWhether <code>self</code> is <code>nil</code>\nLoad source located at the given path.\nRetrieve the original byte content of an interned byte …\nRetrieve a boxed Ruby value containing a <code>Module</code> object for …\nRetrieve a module definition from the interpreter bound to …\nCreate a new instance of the class bound to the Rust type <code>T</code>…\nReturn a reference to the currently active context.\nRemove the current active context and return it.\nWrites the given bytes to the interpreter stdout stream.\nReturn a shared reference to the interpreter pseudorandom …\nReturn a mutable reference to the interpreter pseudorandom …\nSet the currently active context by modifying the parser …\nWrites the given bytes to the interpreter stdout stream …\nRetrieve file contents for a source file.\nCalled when the filename mapped to this type is required …\nRequire source located at the given path.\nReset parser state to initial values.\nTest for a source file at a path and return the absolute …\nWhether <code>self</code> responds to a method.\nCopyright information.\nA description of the current build.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nThe patch level the current build.\nThe target triple of the platform this build targets.\nThe build date of this release.\nThe revision count of the Artichoke git repository used …\nReturn this values Rust-mapped type tag.\nThe target MRI Ruby version for this build.\nSet the current number of set <code>Regexp</code> global variables.\nSet global variable pointed to by <code>name</code> to the given Ruby …\nTest for a source file at a path.\nRetrieve the number of unique strings interned.\nCall <code>#to_s</code> on this <code>Value</code>.\nReturn a <code>Value</code>-wrapped reference to “top self”.\nPerforms the fallible conversion.\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nPerforms the fallible conversion.\nUnset global variable pointed to by <code>name</code>.\nEmit a warning message using <code>Warning#warn</code>.\nReference to a Ruby <code>Class</code> enclosing scope.\nTypesafe wrapper for the <code>RClass *</code> of the enclosing scope …\nTypedef for an mruby free function for an <code>mrb_value</code> with <code>tt</code>…\nTypedef for a method exposed in the mruby interpreter.\nReference to a Ruby <code>Module</code> enclosing scope.\nA generic implementation of a <code>Free</code> function for <code>mrb_value</code>s …\nFactory for <code>EnclosingRubyScope::Class</code> that clones a …\nGet the fully-qualified name of the wrapped class or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFactory for <code>EnclosingRubyScope::Module</code> that clones a …\nResolve the <code>RClass *</code> of the wrapped class or module.\nThe <code>Error</code> type, a wrapper around a dynamic exception type.\nPolymorphic exception type that corresponds to Ruby’s …\nReturn a raise-able <code>sys::mrb_value</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMessage of the <code>Exception</code>.\nClass name of the <code>Exception</code>.\nClass name of the <code>Exception</code>.\nRaise implementation for <code>RubyException</code> boxed trait objects.\nOptional backtrace specified by a <code>Vec</code> of frames.\nIncrementally construct a <code>CaughtException</code>.\nAn <code>Exception</code> rescued with <code>sys::mrb_protect</code>.\nIncrementally construct a <code>CaughtException</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTransform a <code>Exception</code> Ruby <code>Value</code> into an <code>Error</code>.\nConstruct a new, empty <code>Builder</code>.\nConstruct a new <code>CaughtException</code>.\nA “prelude” for users of the <code>extn</code> module in the …\nRuby <code>ArgumentError</code> error type.\nRuby <code>Array</code> type.\nConcrete type for interpreter.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nCoerce Ruby values to native numerics (floats and …\nInfallible conversion between two types.\nMutable infallible conversion between two types.\nFFI type for an owned C pointer.\nRuby <code>EOFError</code> error type.\nRuby <code>EncodingError</code> error type.\nContains the error value\nConcrete error type for errors encountered when coercing …\nError type for failed conversions.\nError type for failed conversions.\nConcrete error type for eval functions.\nRuby <code>Exception</code> error type.\nRuby <code>Exception</code> type.\nRuby <code>fatal</code> error type.\nRuby <code>Fiber</code> type.\nRuby <code>FiberError</code> error type.\nRust extension hook that can be required.\nRuby <code>Fixnum</code> type.\nRuby <code>Float</code> type.\nConcrete float type to coerce values into, e.g. <code>f64</code>.\nRuby <code>FloatDomainError</code> error type.\nRuby <code>FrozenError</code> error type.\nRuby <code>Hash</code> type.\nRuby <code>IOError</code> error type.\nRuby <code>IndexError</code> error type.\nType alias for errors returned from <code>init</code> functions in <code>extn</code>.\nInternal type for non-heap allocated structs.\nRuby <code>Interrupt</code> error type.\nRuby <code>KeyError</code> error type.\nRuby <code>LoadError</code> error type.\nRuby <code>LocalJumpError</code> error type.\nRuby <code>Module</code> type.\nRuby <code>NameError</code> error type.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nRuby <code>NoMemoryError</code> error type.\nRuby <code>NoMethodError</code> error type.\nRuby <code>NotImplementedError</code> error type.\nRuby <code>Object</code> type.\nContains the success value\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nRuby <code>RangeError</code> error type.\nA special <code>Value</code> that is a placeholder for collections that …\nRuby <code>RegexpError</code> error type.\nClasses of Ruby types.\nRuby <code>RuntimeError</code> error type.\nRuby <code>ScriptError</code> error type.\nRuby <code>SecurityError</code> error type.\nRuby <code>SignalException</code> error type.\nInternal type for the singleton class of an object.\nRuby <code>StandardError</code> error type.\nRuby <code>StopIteration</code> error type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nRuby <code>SyntaxError</code> error type.\nRuby <code>SystemCallError</code> error type.\nRuby <code>SystemExit</code> error type.\nRuby <code>SystemStackError</code> error type.\nRuby <code>ThreadError</code> error type.\nFallible conversions between two types.\nMutable fallible conversions between two types.\nRuby <code>TypeError</code> error type.\nRuby <code>UncaughtThrowError</code> error type.\nUnreachable interpreter value. Receiving one of these from …\nConcrete type of boxed Ruby value as inputs to coerce …\nRuby <code>ZeroDivisionError</code> error type.\nCoerce the given Ruby value to a <code>Float</code>.\nPerforms the infallible conversion.\nPerforms the infallible conversion.\nCalled when the filename mapped to this type is required …\nPerforms the fallible conversion.\nPerforms the fallible conversion.\nFailed to extract Artichoke interpreter at an FFI boundary.\nReturns the argument unchanged.\nExtract an <code>Artichoke</code> interpreter from the user data …\nCalls <code>U::from(self)</code>.\nConstructs a new, default <code>InterpreterExtractError</code>.\nError type which converts a <code>fmt::Error</code> into an Artichoke …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGarbage collection primitives for an mruby interpreter.\nGarbage collection arenas for native code.\nCreate a savepoint in the GC arena.\nDisable garbage collection.\nEnable garbage collection.\nReturns the argument unchanged.\nPerform a full garbage collection.\nPerform an incremental garbage collection.\nCalls <code>U::from(self)</code>.\nRetrieve the number of live objects on the interpreter …\nMark a <code>Value</code> as reachable in the mruby garbage collector.\nInterpreter guard that acts as a GC arena savepoint.\nFailed to create a new GC arena savepoint.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAccess the inner guarded interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new, default <code>ArenaSavepointError</code>.\nCreate a new arena savepoint.\nRestore the arena stack pointer to its prior index.\nFunction type for extension hooks stored in the virtual …\nVirtual file system for sources, extensions, and require …\nDirectory at which Ruby sources and extensions are stored …\nVirtual file system with current working directory set to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve an extension hook for the file at <code>path</code>.\nRetrieve an extension hook for the file at <code>path</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck whether <code>path</code> points to a file in the virtual file …\nCheck whether <code>path</code> points to a file in the virtual file …\nCheck whether <code>path</code> points to a file in the virtual file …\nCheck whether a file at <code>path</code> has been required already.\nCheck whether a file at <code>path</code> has been required already.\nCheck whether a file at <code>path</code> has been required already.\nMark a source at <code>path</code> as required on the interpreter.\nMark a source at <code>path</code> as required on the interpreter.\nMark a source at <code>path</code> as required on the interpreter.\nCreate a new hybrid virtual file system.\nCreate a new in memory virtual file system.\nCreate a new native virtual file system.\nRead file contents for the file at <code>path</code>.\nRead file contents for the file at <code>path</code>.\nRead file contents for the file at <code>path</code>.\nWrite extension hook into the virtual file system at <code>path</code>.\nWrite extension hook into the virtual file system at <code>path</code>.\nCheck whether <code>path</code> points to a file in the virtual file …\nCheck whether <code>path</code> points to a file in the virtual file …\nCheck whether <code>path</code> points to a file in the virtual file …\nCreate a new in memory virtual file system with the given …\nWrite file contents into the virtual file system at <code>path</code>.\nWrite file contents into the virtual file system at <code>path</code>.\nDefine this method on the class-like pointed to by <code>into</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA registry for Module specs that uses types as keys.\nReturns the number of module specs the registry can hold …\nReturns true if the registry contains a module spec for the\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the module spec corresponding to …\nReturns a reference to the registry’s <code>BuildHasher</code>.\nInserts a type-module spec pair into the registry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the registry contains module specs.\nReturns the number of module specs in the registry.\nAn iterator of all module specs stored in the <code>Registry</code> in …\nConstruct a new, empty <code>Registry</code>.\nReserves <code>capacity</code> for at least additional more elements to …\nResolve a type’s <code>sys::RClass</code> using its enclosing scope …\nShrinks the capacity of the registry with a lower bound. …\nShrinks the capacity of the map as much as possible. It …\nTries to reserve capacity for at least additional more …\nConstruct a new <code>Registry</code> with the given <code>capacity</code>.\nConstruct a new <code>Registry</code> with the given <code>capacity</code> and …\nConstruct a new <code>Registry</code> with the given <code>hash_builder</code>.\nConcrete type for arguments passed to <code>funcall</code>.\nRuby <code>ArgumentError</code> error type.\nRuby <code>Array</code> type.\nConcrete type for interpreter.\nConcrete type for interpreter.\nConcrete type for Artichoke interpreter.\nConcrete type for blocks passed to <code>funcall</code>.\nRust <code>bool</code> type.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nRust <code>Vec&lt;u8&gt;</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nDefine and store class specs on an interpreter.\nCoerce Ruby values to native numerics (floats and …\nConcrete type for parser context.\nInfallible conversion between two types.\nMutable infallible conversion between two types.\nFFI type for an owned C pointer.\nDebugging and <code>Exception</code> message support.\nDefine constants on an interpreter.\nRuby <code>EOFError</code> error type.\nRuby <code>EncodingError</code> error type.\nConcrete error type for errors encountered when …\nConcrete error type for errors encountered when coercing …\nConcrete error type for fallible operations.\nError type for failed conversions.\nError type for failed conversions.\nConcrete error type for eval functions.\nConcrete error type for eval functions.\nConcrete error type for failures manipulating global …\nConcrete error type for errors encountered when retrieving …\nConcrete type for errors returned while interning symbols.\nConcrete error type for errors encountered when reading …\nConcrete type for errors returned from file system IO.\nConcrete error type for errors encountered when …\nError type for Parser APIs.\nConcrete type for errors when retrieving the pseudorandom …\nConcrete error type for errors encountered when …\nConcrete error type for funcall errors.\nConcrete error type for errors encountered when outputting …\nExecute code and retrieve its result.\nRuby <code>Exception</code> error type.\nRuby <code>Exception</code> type.\nConcrete type for errors returned by <code>File::require</code>.\nRuby <code>fatal</code> error type.\nRuby <code>Fiber</code> type.\nRuby <code>FiberError</code> error type.\nRust extension hook that can be required.\nRuby <code>Fixnum</code> type.\nRust float type.\nRuby <code>Float</code> type.\nConcrete float type to coerce values into, e.g. <code>f64</code>.\nRuby <code>FloatDomainError</code> error type.\nRuby <code>FrozenError</code> error type.\nConcrete <code>BuildHasher</code> type which is global to the …\nGet and set global variables on an interpreter.\nA trait for retrieving an interpreter-global <code>BuildHasher</code>.\nRuby <code>Hash</code> type.\nRuby <code>IOError</code> error type.\nErrors encountered when incrementing line numbers on …\nRuby <code>IndexError</code> error type.\nInternal type for non-heap allocated structs.\nStore and retrieve byte strings that have the same …\nRuby <code>Interrupt</code> error type.\nPerform I/O external to the interpreter.\nRuby <code>KeyError</code> error type.\nRuby <code>LoadError</code> error type.\nLoad Ruby sources and Rust extensions into an interpreter.\nRuby <code>LocalJumpError</code> error type.\nRust <code>HashMap&lt;K, V&gt;</code> type.\nRuby <code>Module</code> type.\nDefine and store module specs on an interpreter.\nRuby <code>NameError</code> error type.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nRuby <code>NoMemoryError</code> error type.\nRuby <code>NoMethodError</code> error type.\nRuby <code>NotImplementedError</code> error type.\nArbitrary Rust struct type.\nRuby <code>Object</code> type.\nAn overflow occurred when incrementing the line number.\nManage parser state, active filename context, and line …\nInterpreter global pseudorandom number generator (PRNG).\nConcrete type for the interpreter pseudorandom number …\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nRuby <code>RangeError</code> error type.\nA special <code>Value</code> that is a placeholder for collections that …\nTrack the state of <code>Regexp</code> special global variables and …\nRuby <code>RegexpError</code> error type.\nClasses of Ruby types.\nRuby <code>RuntimeError</code> error type.\nClasses of Rust types.\nThe initial <code>Symbol</code> index returned by the interner.\nRuby <code>ScriptError</code> error type.\nRuby <code>SecurityError</code> error type.\nRuby <code>SignalException</code> error type.\nRust signed integer type.\nInternal type for the singleton class of an object.\nType representing a class specification.\nType representing a module specification.\nRuby <code>StandardError</code> error type.\nRuby <code>StopIteration</code> error type.\nRust <code>String</code> type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nConcrete type for symbol identifiers.\nRuby <code>SyntaxError</code> error type.\nRuby <code>SystemCallError</code> error type.\nRuby <code>SystemExit</code> error type.\nRuby <code>SystemStackError</code> error type.\nRuby <code>ThreadError</code> error type.\nReturn a <code>Value</code>-wrapped reference to <em>top self</em>.\nFallible conversions between two types.\nMutable fallible conversions between two types.\nRuby <code>TypeError</code> error type.\nRuby <code>UncaughtThrowError</code> error type.\nUnreachable interpreter value. Receiving one of these from …\nRust unsigned integer type.\nA boxed Ruby value owned by the interpreter.\nConcrete value type for boxed Ruby values.\nConcrete type of boxed Ruby value as inputs to coerce …\nConcrete type for Ruby values.\nConcrete type for return values from eval.\nConcrete type for return values from eval.\nConcrete value type for global variables.\nConcrete value type for boxed Ruby values.\nConcrete <code>Value</code> type.\nConcrete type for results from <code>funcall</code>.\nRust <code>Vec&lt;T&gt;</code> type.\nEmit warnings during interpreter execution to stderr.\nRuby <code>ZeroDivisionError</code> error type.\nRetrieve the current number of set <code>Regexp</code> global variables.\nIncrement line number and return the new value.\nCheck if a byte string is already interned and return its …\nCheck if a string is already interned and return its …\nReturn the class name for the given value’s type.\nRetrieve a boxed Ruby value containing a <code>Class</code> object for …\nRetrieve a class definition from the state bound to Rust …\nClear all <code>Regexp</code> state.\nCoerce the given Ruby value to a <code>Float</code>.\nPerforms the infallible conversion.\nPerforms the infallible conversion.\nCreate a class definition bound to a Rust type <code>T</code>.\nAdd a Rust extension hook to the virtual file system. A …\nCreate a module definition bound to a Rust type <code>T</code>.\nAdd a Ruby source to the virtual file system.\nDefine a class constant.\nDefine a global constant.\nDefine a module constant.\nEval code on the Artichoke interpreter using the current …\nEval code on the Artichoke interpreter using a new file …\nEval code on the Artichoke interpreter using the current …\nFetch the current line number from the parser state.\nCall <code>#freeze</code> on this <code>Value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCall a method on this <code>Value</code> with arguments and an optional …\nGet the Ruby value stored in the global variable pointed …\nRetrieve the interpreter’s global <code>BuildHasher</code>.\nCall <code>#inspect</code> on this <code>Value</code>.\nReturn a name for the given value’s type that is …\nStore an immutable byte string for the life of the …\nStore an immutable string for the life of the interpreter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve whether a class definition exists from the state …\nCall <code>#frozen?</code> on this <code>Value</code>.\nRetrieve whether a module definition exists from the …\nWhether <code>self</code> is <code>nil</code>\nLoad source located at the given path.\nRetrieve the original byte content of an interned byte …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nReturn the message this Ruby exception was constructed …\nRetrieve a boxed Ruby value containing a <code>Module</code> object for …\nRetrieve a module definition from the interpreter bound to …\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nReturn this Ruby exception’s class name.\nConstruct a new, default <code>ArgumentError</code> Ruby exception.\nConstruct a new, default <code>EncodingError</code> Ruby exception.\nConstruct a new, default <code>EOFError</code> Ruby exception.\nConstruct a new, default <code>Exception</code> Ruby exception.\nConstruct a new, default <code>fatal</code> Ruby exception.\nConstruct a new, default <code>FiberError</code> Ruby exception.\nConstruct a new, default <code>FloatDomainError</code> Ruby exception.\nConstruct a new, default <code>FrozenError</code> Ruby exception.\nConstruct a new, default <code>IndexError</code> Ruby exception.\nConstruct a new, default <code>Interrupt</code> Ruby exception.\nConstruct a new, default <code>IOError</code> Ruby exception.\nConstruct a new, default <code>KeyError</code> Ruby exception.\nConstruct a new, default <code>LoadError</code> Ruby exception.\nConstruct a new, default <code>LocalJumpError</code> Ruby exception.\nConstruct a new, default <code>NameError</code> Ruby exception.\nConstruct a new, default <code>NoMemoryError</code> Ruby exception.\nConstruct a new, default <code>NoMethodError</code> Ruby exception.\nConstruct a new, default <code>NotImplementedError</code> Ruby …\nConstruct a new, default <code>RangeError</code> Ruby exception.\nConstruct a new, default <code>RegexpError</code> Ruby exception.\nConstruct a new, default <code>RuntimeError</code> Ruby exception.\nConstruct a new, default <code>ScriptError</code> Ruby exception.\nConstruct a new, default <code>SecurityError</code> Ruby exception.\nConstruct a new, default <code>SignalException</code> Ruby exception.\nConstruct a new, default <code>StandardError</code> Ruby exception.\nConstruct a new, default <code>StopIteration</code> Ruby exception.\nConstruct a new, default <code>SyntaxError</code> Ruby exception.\nConstruct a new, default <code>SystemCallError</code> Ruby exception.\nConstruct a new, default <code>SystemExit</code> Ruby exception.\nConstruct a new, default <code>SystemStackError</code> Ruby exception.\nConstruct a new, default <code>ThreadError</code> Ruby exception.\nConstruct a new, default <code>TypeError</code> Ruby exception.\nConstruct a new, default <code>UncaughtThrowError</code> Ruby exception.\nConstruct a new, default <code>ZeroDivisionError</code> Ruby exception.\nCreate a new instance of the class bound to the Rust type <code>T</code>…\nReturn a reference to the currently active context.\nRemove the current active context and return it.\nWrites the given bytes to the interpreter stdout stream.\nReturn a shared reference to the interpreter pseudorandom …\nReturn a mutable reference to the interpreter pseudorandom …\nSet the currently active context by modifying the parser …\nWrites the given bytes to the interpreter stdout stream …\nRetrieve file contents for a source file.\nCalled when the filename mapped to this type is required …\nRequire source located at the given path.\nReset parser state to initial values.\nTest for a source file at a path and return the absolute …\nWhether <code>self</code> responds to a method.\nReturn this values Rust-mapped type tag.\nSet the current number of set <code>Regexp</code> global variables.\nSet global variable pointed to by <code>name</code> to the given Ruby …\nTest for a source file at a path.\nRetrieve the number of unique strings interned.\nCall <code>#to_s</code> on this <code>Value</code>.\nReturn a <code>Value</code>-wrapped reference to “top self”.\nPerforms the fallible conversion.\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nConsume <code>self</code> and try to convert <code>self</code> to type <code>T</code> using a …\nPerforms the fallible conversion.\nUnset global variable pointed to by <code>name</code>.\nEmit a warning message using <code>Warning#warn</code>.\nConstruct a new, <code>ArgumentError</code> Ruby exception with the …\nConstruct a new, <code>EncodingError</code> Ruby exception with the …\nConstruct a new, <code>EOFError</code> Ruby exception with the given …\nConstruct a new, <code>Exception</code> Ruby exception with the given …\nConstruct a new, <code>fatal</code> Ruby exception with the given …\nConstruct a new, <code>FiberError</code> Ruby exception with the given …\nConstruct a new, <code>FloatDomainError</code> Ruby exception with the …\nConstruct a new, <code>FrozenError</code> Ruby exception with the given …\nConstruct a new, <code>IndexError</code> Ruby exception with the given …\nConstruct a new, <code>Interrupt</code> Ruby exception with the given …\nConstruct a new, <code>IOError</code> Ruby exception with the given …\nConstruct a new, <code>KeyError</code> Ruby exception with the given …\nConstruct a new, <code>LoadError</code> Ruby exception with the given …\nConstruct a new, <code>LocalJumpError</code> Ruby exception with the …\nConstruct a new, <code>NameError</code> Ruby exception with the given …\nConstruct a new, <code>NoMemoryError</code> Ruby exception with the …\nConstruct a new, <code>NoMethodError</code> Ruby exception with the …\nConstruct a new, <code>NotImplementedError</code> Ruby exception with …\nConstruct a new, <code>RangeError</code> Ruby exception with the given …\nConstruct a new, <code>RegexpError</code> Ruby exception with the given …\nConstruct a new, <code>RuntimeError</code> Ruby exception with the given\nConstruct a new, <code>ScriptError</code> Ruby exception with the given …\nConstruct a new, <code>SecurityError</code> Ruby exception with the …\nConstruct a new, <code>SignalException</code> Ruby exception with the …\nConstruct a new, <code>StandardError</code> Ruby exception with the …\nConstruct a new, <code>StopIteration</code> Ruby exception with the …\nConstruct a new, <code>SyntaxError</code> Ruby exception with the given …\nConstruct a new, <code>SystemCallError</code> Ruby exception with the …\nConstruct a new, <code>SystemExit</code> Ruby exception with the given …\nConstruct a new, <code>SystemStackError</code> Ruby exception with the …\nConstruct a new, <code>ThreadError</code> Ruby exception with the given …\nConstruct a new, <code>TypeError</code> Ruby exception with the given …\nConstruct a new, <code>UncaughtThrowError</code> Ruby exception with …\nConstruct a new, <code>ZeroDivisionError</code> Ruby exception with the …\nInformation about an Artichoke build.\nA description of the compiler used to build Artichoke.\nA description of the compiler used to build Artichoke.\nCopyright information.\nA description of the current build.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe patch level the current build.\nThe target triple of the platform this build targets.\nThe build date of this release.\nThe target MRI Ruby version for this build.\nCopyright information.\nA description of the current build.\nThe engine, or VM, used in the current build.\nThe version of the engine, or VM, used in the current …\nThe patch level the current build.\nThe target triple of the platform this build targets.\nThe build date of this release.\nThe target MRI Ruby version for this build.\nThe target MRI Ruby version for this build.\nThe target MRI Ruby version for this build.\nSet a description of the compiler used to build Artichoke.\nSet copyright information.\nSet a description of the current build.\nSet the engine, or VM, used in the current build.\nSet the version of the engine, or VM, used in the current …\nSet the patch level the current build.\nSet the target triple of the platform this build targets.\nSet the build date of this release.\nSet the target MRI Ruby version for this build.\nSet the target MRI Ruby version for this build.\nContainer for interpreter global state.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new <code>State</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new, default <code>Process</code> output strategy.\nConstructs a new, default <code>Captured</code> output strategy.\nConstructs a new, default <code>Null</code> output strategy.\n<code>Context</code> is used to manipulate the current filename on the …\nFilename of the top eval context.\nIncrement line number and return the new value.\nFetch the current line number from the parser state.\nFilename of this <code>Context</code>.\nFFI-safe NUL-terminated C String of this <code>Context</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Context</code>.\nCreate a new <code>Context</code> without checking for NUL bytes in the …\nReturns the last <code>Context</code>, or <code>None</code> if the context stack is …\nRemoves the last element from the context stack and …\nPush a <code>Context</code> onto the stack.\nReset line number to <code>1</code>.\nCreate a root, or default, <code>Context</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructs a new, default Regexp <code>State</code>.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nExtract the inner <code>sys::mrb_value</code> from this <code>Value</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunction accepts any number of arguments\nFunction takes a block argument\nkeyword arguments (<code>n</code> of keys, <code>kdict</code>)\nFunction accepts no arguments\nFunction takes <code>n</code> optional arguments\nrequired arguments after rest\nFunction requires n arguments.\nFunction takes <code>n1</code> mandatory arguments and <code>n2</code> optional …\nrest argument\nVersion metadata <code>String</code> for embedded mruby.\nDebug representation for <code>mrb_state</code>.\nFormat specifiers for <code>mrb_get_args</code> function.\nRetrieve an Array argument\nRetrieve a Block argument.\nRetrieve a Block argument and raise an exception if none …\nRetrieve a Boolean argument.\nReceive two arguments, a C Array of <code>mrb_value</code>s and its …\nRetrieve a Class argument\nRetrieve a NUL-terminated <code>CString</code> argument\nRetrieve a <code>CString</code> and its length. Usable like:\nReceive two arguments, a <code>void *</code> pointer to data and an …\nRetrieve a Float argument.\nThe following args specified are optional.\nRetrieve a Hash argument\nInternal, retrieve a <code>void *</code>.\nRetrieve an Integer argument.\nRetrieve a Module argument\nRetrieve an Array argument or <code>nil</code>\nRetrieve a Hash argument or <code>nil</code>\nRetrieve a String argument or <code>nil</code>\nReceive two arguments, a C Array of <code>mrb_value</code>s and its …\nRetrieve a NUL-terminated <code>CString</code> argument. Gives NULL for …\nRetrieve a <code>CString</code> and its length. Gives (NULL, 0) for <code>nil</code>…\nCould be used to retrieve any type of argument\nRetrieve a Boolean indicating whether the previous …\nRetrieve the rest of arguments as an array; Usable like:\nRetrieve the rest of arguments as an array; avoid copy of …\nRetrieve a String argument\nRetrieve a Symbol argument.\nRuby <code>Array</code> type.\nRust <code>bool</code> type.\nRuby <code>TrueClass</code> and <code>FalseClass</code> type.\nRust <code>Vec&lt;u8&gt;</code> type.\nFFI type for a borrowed C pointer.\nRuby <code>Class</code> type.\nFFI type for an owned C pointer.\nRuby <code>Exception</code> type.\nRuby <code>Fiber</code> type.\nRuby <code>Fixnum</code> type.\nRust float type.\nRuby <code>Float</code> type.\nRuby <code>Hash</code> type.\nInternal type for non-heap allocated structs.\nRust <code>HashMap&lt;K, V&gt;</code> type.\nRuby <code>Module</code> type.\nRuby <code>nil</code> singleton type, the only instance of <code>NilClass</code>.\nArbitrary Rust struct type.\nRuby <code>Object</code> type.\nRuby <code>Proc</code> type.\nRuby <code>Range</code> type.\nA special <code>Value</code> that is a placeholder for collections that …\nClasses of Ruby types.\nClasses of Rust types.\nRust signed integer type.\nInternal type for the singleton class of an object.\nRust <code>String</code> type.\nRuby <code>String</code> type.\nRuby <code>Symbol</code> type.\nUnreachable interpreter value. Receiving one of these from …\nRust unsigned integer type.\nRust <code>Vec&lt;T&gt;</code> type.\nParse a <code>Ruby</code> type classifier from a <code>sys::mrb_value</code>.\nArgument count exceeds maximum allowed by the VM.\nMax argument count for function calls including initialize …\nBoxed Ruby value in the <code>Artichoke</code> interpreter.\nReturns the argument unchanged.\nConstruct a new <code>Value</code> from a <code>sys::mrb_value</code>.\nReturns the argument unchanged.\nNumber of arguments given.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn whether this object is unreachable by any GC roots.\nWhether a value is an interpreter-only variant not exposed …\nMaximum number of arguments supported.\nCreate a new, empty Ruby value.\nConstructs a new, empty <code>ArgCountError</code>.\nCreate a <code>nil</code> Ruby Value.")