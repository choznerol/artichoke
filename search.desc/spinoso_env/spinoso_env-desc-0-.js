searchState.loadedDescShard("spinoso_env", 0, "ENV is a hash-like accessor for environment variables.\nError that indicates an argument parsing or value logic …\nError that indicates an argument parsing or value logic …\nSum type of all errors possibly returned from <code>get</code>, <code>put</code>, and\nError that indicates the access to the underlying platform …\nError that indicates the underlying platform API returned …\nA hash-like accessor for environment variables using a …\nA hash-like accessor for environment variables using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the value for environment variable <code>name</code>.\nRetrieves the value for environment variable <code>name</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume this error and return the inner message.\nRetrieve the exception message associated with this …\nRetrieve the exception message associated with this …\nConstructs a new, empty ENV <code>Memory</code> backend.\nConstructs a new, default ENV <code>System</code> backend.\nConstruct a new, default argument error.\nConstruct a new, default invalid error.\nSets the environment variable <code>name</code> to <code>value</code>.\nSets the environment variable <code>name</code> to <code>value</code>.\nSerialize the environ to a <code>HashMap</code>.\nSerialize the environ to a <code>HashMap</code>.\nConstruct a new, argument error with a message.\nConstruct a new, invalid error with a message.")